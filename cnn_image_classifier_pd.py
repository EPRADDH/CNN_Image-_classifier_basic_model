# -*- coding: utf-8 -*-
"""CNN_image classifier_PD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jh3XAov3wEMT7l3kejBO5lT9RWao4AJb
"""

import keras

# Importing the Keras libraries and packages
from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense

# Initialising the CNN classifier
classifier = Sequential()

#Step 1 - Convolution
classifier.add(Convolution2D(32,3,3, input_shape = (64,64,3) , activation = 'relu'))

#Step 2 - Pooling
classifier.add(MaxPooling2D(pool_size = (2,2)))

#Step 3 - Flattening
classifier.add(Flatten())

# Step 4 - Full connection
classifier.add(Dense(units = 128, activation = 'relu'))
classifier.add(Dense(units = 1, activation = 'sigmoid')) #becouse out is binary using sigmoid

#compling the CNN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

"""Image preprocessing
Part 2 - Fitting the CNN to the images
"""

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

"""TrainingSet/TestSet import"""

training_Set = '/content/drive/My Drive/Data_Science_Drive/Convolutional_Neural_Networks/dataset/training_set'
test_Set = '/content/drive/My Drive/Data_Science_Drive/Convolutional_Neural_Networks/dataset/test_set'

"""fit trainingSet/testSet into DataGenrator for Augmentation"""

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/Data_Science_Drive/Convolutional_Neural_Networks/dataset/training_set',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/Data_Science_Drive/Convolutional_Neural_Networks/dataset/test_set',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')

classifier.fit_generator(training_set,
                         steps_per_epoch = 8000,
                         epochs = 7,
                         validation_data = test_set,
                         validation_steps = 2000)

# Part 3 - Making new predictions

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('/content/drive/My Drive/Data_Science_Drive/Convolutional_Neural_Networks/dataset/single_prediction/cat_or_dog_1.jpg', target_size = (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
    prediction = 'dog'
else:
    prediction = 'cat'

#Python pickle module is used for serializing and de-serializing a Python object structure to byte code,byte code to object
import pickle
# saveig the model in to the local file system
filename = 'CNN_image _classifier_finalized_model.pickle'
pickle.dump(classifier,open(filename,'wb'))   # wb ==> write binary format

loaded_model = pickle.load(open(filename,'rb'))  # rb ==> read binary format

# Part 3 - Making new predictions

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('/content/drive/My Drive/Data_Science_Drive/Convolutional_Neural_Networks/dataset/single_prediction/cat_or_dog_1.jpg', target_size = (64, 64))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = loaded_model.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
    print('Dog image ')
else:
    print('Cat image')

#result

